{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OAEI,sBAAMC,SAfW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAMC,IAAMf,EAAMgB,IAAMN,IACxB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAIzB,IAEIC,EDlBgBK,CAAa1B,GAA7BO,EAF4B,EAE5BA,KAF4B,EAEtBa,QAEb,OACI,qCACI,6BAAKpB,IACL,qBAAKgB,UAAU,YAAf,SAEQT,EAAKE,KAAI,SAACC,GAAD,OACL,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEXxBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,KAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCVjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b3ff05bc.chunk.js","sourcesContent":["import React, { useState } from 'react';    \r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats =>  [inputValue, ...cats]);\r\n            setInputValue('');            \r\n        }\r\n\r\n\r\n\r\n    }\r\n    \r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UvVODoClPzA6RB74ZYuO8zs569oXP75T`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n            <img  src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data, loading} =useFetchGifs(category);        \r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n\r\n\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading:false\r\n                    });\r\n                \r\n            });\r\n    }, []) \r\n    \r\n    return state\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([''])\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n\r\n                }\r\n            </ol>        \r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}